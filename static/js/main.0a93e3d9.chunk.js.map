{"version":3,"sources":["components/AllergyTool/ProductForm.js","components/AllergyTool/Buttons.js","components/AllergyTool/Allergens.js","components/AllergyTool/Error.js","controllers/allergy-utils.js","components/AllergyTool/AllergyTool.js","components/Header.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["ProductForm","className","this","props","onSubmit","formId","type","name","placeholder","value","onChange","e","onNameChange","ingredients","onIngredientsChange","onClick","onHandleReset","Component","Buttons","onHandleClearAll","onHandleCompareProducts","Allergens","text","Error","validateInput","str","match","convertToArray","toLowerCase","replace","split","map","item","trim","filter","index","self","indexOf","sort","initialState","allergens","compareClicked","error","products","_id","AllergyTool","handleClearAll","setState","handleNameChange","id","target","prevState","el","handleIngredientsChange","handleResetOne","preventDefault","handleCompareProducts","allergensResult","arr1","arr2","matchedElements","includes","join","console","log","message","compareProducts","state","Header","Footer","href","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a93e3d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ProductForm extends Component {\n  render() {\n    return(\n      <div className={this.props.className}>\n        <form onSubmit={this.onSubmit}>\n          <h3 className=\"title is-3 has-text-centered\">Product {this.props.formId}</h3>\n            <div>\n            <div className=\"field\">\n              <label className=\"label\">Name:</label>\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Product Name\"\n                value={this.props.name}\n                onChange={(e) => this.props.onNameChange(this.props.formId, e)}\n              />\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Ingredients:</label>\n              <textarea\n                className=\"textarea\"\n                name=\"ingredients\"\n                placeholder=\"Product Ingredients\"\n                value={this.props.ingredients}\n                onChange={(e) => this.props.onIngredientsChange(this.props.formId, e)}\n              />\n            </div>\n            \n            </div>\n            <div className=\"buttonBox\">\n              <button\n                onClick={(e) => this.props.onHandleReset(this.props.formId, e)}\n                className=\"button\">\n                  Clear product details\n              </button>\n            </div>\n            \n          </form>\n        </div>\n    )\n  }\n}\nexport default ProductForm;","import React from 'react';\n\nconst Buttons = (props) => (\n  <div className=\"section has-text-centered section--row\">\n    <button\n      className=\"button is-warning button--margin\"\n      onClick={props.onHandleClearAll}>Clear everything</button>\n    <input\n      className=\"button is-primary button--margin\"\n      type=\"submit\"\n      value=\"Compare products\"\n      onClick={props.onHandleCompareProducts} />\n  </div>\n);\n\nexport default Buttons;","import React from 'react';\n\nconst Allergens = (props) => (\n  <div className=\"\">\n    {(typeof props.text === Array) ? \n      (<p>\n        <strong>Possible Allergens: </strong>\n        { props.text }\n      </p>): (\n      <p>\n        <strong>Possible Allergens: </strong>\n        { props.text }\n      </p>)\n    }\n  </div>\n);\n\nexport default Allergens;","import React from 'react';\n\nconst Error = (props) => (\n  <div>\n    <p className=\"has-text-danger\">{props.text}</p>\n  </div>\n);\n\nexport default Error;","// validate data\nfunction validateInput(str) {\n  if(str.match(/<\\/?[a-z][a-z0-9]*>/ig)) {\n    return '';\n  }\n  return str;\n}\n\n// sanitize data & convert to array\nfunction convertToArray(str) {\n  return str\n    .toLowerCase()\n    .replace(/\\s*(AND|;)\\s*/ig, \",\")\n    .split(',')\n    .map(item => item.trim())\n    .filter((item,index,self) => self.indexOf(item)==index)\n    .sort();\n}\n\n// compare two arrays and return matching elements as a string\nfunction compareProducts(arr1, arr2) {\n  if (arr1[0]==\"\" || arr2[0]==\"\" ) {\n    return { error: 'Please enter valid ingredients.' };\n  }\n  const matchedElements = arr1.filter((el => arr2.includes(el))).sort().join(\", \");\n  console.log(\"matchedElements: \", matchedElements);\n  return (\n    matchedElements !='' ? {message: matchedElements} : {message: 'None - no matched ingredients'}\n  );\n}\n\nexport { validateInput, convertToArray, compareProducts };","import React, { Component }  from 'react';\nimport ProductForm from './ProductForm';\nimport Buttons from './Buttons';\nimport Allergens from './Allergens';\nimport Error from './Error';\nimport { validateInput, compareProducts, convertToArray } from '../../controllers/allergy-utils.js';\n\nlet initialState = {\n  allergens: '',\n  compareClicked: false,\n  error: '',\n  products: [\n    { _id: 1,\n      name: '',\n      ingredients: ''\n    }, {\n    _id: 2,\n    name: '',\n    ingredients: ''\n  }]\n};\n\nclass AllergyTool extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  // ===== clearing ALL product forms = back to initial state\n  handleClearAll = () => {\n    this.setState(() => (initialState));\n  }\n\n  // ===== methods for product forms\n  handleNameChange = (id, e) => {\n    const name = validateInput(e.target.value);\n    this.setState(prevState => ({\n      products: prevState.products.map(el => el._id === id ? { ...el, name } : el)\n    }));\n  };\n\n  handleIngredientsChange = (id, e) => {\n    const ingredients = validateInput(e.target.value);\n    this.setState(prevState => ({\n      products: prevState.products.map(el => el._id === id ? { ...el, ingredients } : el)\n    }));\n  };\n\n  // ====== resetting just ONE of the product forms\n  handleResetOne = (id, e) => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      allergens: '',\n      error: '',\n      products: prevState.products.map(el => el._id === id ? { ...el, name: '', ingredients: '' } : el)\n    }));\n  };\n\n  // === comparing products\n  handleCompareProducts = (e) => {\n    e.preventDefault();\n    let arr1=convertToArray(this.state.products[0].ingredients);\n    let arr2=convertToArray(this.state.products[1].ingredients);\n    let allergensResult = compareProducts(arr1, arr2);\n    if (allergensResult.error) {\n      this.setState(() => ({\n        compareClicked: true,\n        allergens: '',\n        error: allergensResult.error\n      }));\n    } else {\n      this.setState(() => ({\n        compareClicked: true,\n        allergens: allergensResult.message,\n        error: ''\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <section className=\"section\">\n          <div className=\"allergyContainer\">\n            <ProductForm\n              formId={1}\n              className='productForm productForm--marginRight'\n              onNameChange={this.handleNameChange}\n              onIngredientsChange={this.handleIngredientsChange}\n              onHandleReset={this.handleResetOne}\n              name={this.state.products[0].name}\n              ingredients={this.state.products[0].ingredients}\n            />\n            <ProductForm \n              formId={2}\n              className='productForm'\n              onNameChange={this.handleNameChange}\n              onIngredientsChange={this.handleIngredientsChange}\n              onHandleReset={this.handleResetOne}\n              name={this.state.products[1].name}\n              ingredients={this.state.products[1].ingredients}\n            />\n          </div>\n          <Buttons \n            onHandleClearAll={this.handleClearAll}\n            onHandleCompareProducts={this.handleCompareProducts}\n          />\n        </section>\n        <section className=\"has-text-centered\">\n          {this.state.error && <Error text={this.state.error} />}\n          {this.state.allergens && <Allergens text={this.state.allergens} />}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default AllergyTool;","import React from 'react';\n\nconst Header = () => (\n  <section className=\"section\">\n    <h1 className=\"title is-1 has-text-centered\">Allergy Finder</h1>\n    <div className=\"container has-text-centered\">\n      <p>Allergic to certain skincare/cosmetic products, but unsure of which ingredients are causing the allergic reactions?</p><br />\n      <p>Fill out the fields below to discover which ingredients might be irritating your skin.</p>\n    </div>\n  </section>\n);\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"myFooter footer\">\n    <div>\n      <p><strong>DISCLAIMER: </strong>All content published on the page is <strong><em>not</em></strong> a substitute for medical advice, diagnosis, or treatment. Please refer to a healthcare professional for questions about your medical condition.</p>\n    </div>\n    <br /><br />\n    <div className=\"has-text-centered\">\n      <p>Developed by <a href=\"https://github.com/minteapixel/\">Eileen L.</a> | <a href=\"https://github.com/minteapixel/allergy-finder\">Source Code</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport AllergyTool from './AllergyTool/AllergyTool';\nimport Header from './Header';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"container is-fluid content\">\n          <Header />\n          <AllergyTool />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}